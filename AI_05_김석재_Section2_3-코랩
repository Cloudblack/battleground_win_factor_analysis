{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"PUBG3-코랩","provenance":[],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"-JguSvaTJCRK","executionInfo":{"status":"ok","timestamp":1630482677329,"user_tz":-540,"elapsed":732,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}}},"source":["# import pandas as pd\n","# df4=pd.read_csv('/새 폴더/df4.csv') #PUBG의 데이터를 불러왔다\n","# print(df4.shape) #df의 행렬크기"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"ibngP8SsSBTG","colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"error","timestamp":1630498132769,"user_tz":-540,"elapsed":391,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}},"outputId":"82652fd9-d1df-4ba0-c0df-61cbb428168b"},"source":["import pandas as pd             #코랩용\n","df4=pd.read_csv('/content/drive/MyDrive/AI/df4.csv') #PUBG의 데이터를 불러왔다\n","print(df4.shape) #df의 행렬크기"],"execution_count":1,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-7991b384b2f3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m             \u001b[0;31m#코랩용\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf4\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/AI/df4.csv'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#PUBG의 데이터를 불러왔다\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf4\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#df의 행렬크기\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    686\u001b[0m     )\n\u001b[1;32m    687\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 688\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    689\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    690\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    452\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    453\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 454\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp_or_buf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    946\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    947\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 948\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    949\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    950\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1178\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"c\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1179\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"c\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1180\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1181\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1182\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"python\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   2008\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"usecols\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2009\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2010\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2011\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2012\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/drive/MyDrive/AI/df4.csv'"]}]},{"cell_type":"code","metadata":{"id":"ZBHZMHmAVlC_","executionInfo":{"status":"ok","timestamp":1630482689657,"user_tz":-540,"elapsed":84,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}}},"source":[""],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cbaAI3vUVwcZ","executionInfo":{"status":"ok","timestamp":1630498179889,"user_tz":-540,"elapsed":32165,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}},"outputId":"0b1bc69f-b2e8-4c6f-f816-6b47d473b0a9"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"N7tqpNEtoBsa","executionInfo":{"status":"ok","timestamp":1630482690066,"user_tz":-540,"elapsed":419,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}}},"source":["df4=df4.drop('Unnamed: 0',axis=1) #예전 index가 남아있어서 제거"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"qFpj5Ejx7uRk","executionInfo":{"status":"ok","timestamp":1630482693183,"user_tz":-540,"elapsed":3120,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}}},"source":["from sklearn.model_selection import train_test_split\n","train,test=train_test_split(df4,train_size=0.8,random_state=2) #train test 분리"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s-4ENNcs7xwH","executionInfo":{"status":"ok","timestamp":1630482695573,"user_tz":-540,"elapsed":2394,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}},"outputId":"df41bf37-59bd-4554-ba72-bf0cea3927ea"},"source":["train,vali=train_test_split(train,train_size=0.8,random_state=2)#train vali 분리\n","train.shape,vali.shape,test.shape"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((2746525, 31), (686632, 31), (858290, 31))"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zxBZSMxG70oU","executionInfo":{"status":"ok","timestamp":1630482696014,"user_tz":-540,"elapsed":444,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}},"outputId":"16db29b4-7c73-4611-abbb-e76b98c78e2c"},"source":["target='winPlacePerc'  #target feature 분리\n","y_train=train[target]\n","X_train=train.drop(target,axis=1)\n","y_vali=vali[target]\n","X_vali=vali.drop(target,axis=1)\n","y_test=test[target]\n","X_test=test.drop(target,axis=1)\n","X_train.shape,X_vali.shape,X_test.shape,y_train.shape,y_vali.shape,y_test.shape"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((2746525, 30), (686632, 30), (858290, 30), (2746525,), (686632,), (858290,))"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"7IbDms6eidIn","executionInfo":{"status":"ok","timestamp":1630482696014,"user_tz":-540,"elapsed":5,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}}},"source":["#일단지워봅시다!"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"AxlnjaI3ihEt","executionInfo":{"status":"ok","timestamp":1630482696015,"user_tz":-540,"elapsed":5,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}}},"source":["features=['damageDealt', 'DBNOs', 'kills', 'matchDuration', 'numGroups', 'w/t',\n","       'r/t', 'ttdistgame','groupId']"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"aswGvRbaihdd","executionInfo":{"status":"ok","timestamp":1630482696739,"user_tz":-540,"elapsed":729,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}}},"source":["X_train=X_train[features]\n","X_vali=X_vali[features]\n","X_test=X_test[features]"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"tZ_jCrHd73fP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630482725137,"user_tz":-540,"elapsed":12815,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}},"outputId":"b015e2b6-d703-486b-de34-f6372d566d2d"},"source":["!pip install category_encoders\n","!pip install eli5\n","!pip install hyperopt\n","!pip install xgboost\n"],"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting category_encoders\n","  Downloading category_encoders-2.2.2-py2.py3-none-any.whl (80 kB)\n","\u001b[?25l\r\u001b[K     |████                            | 10 kB 26.3 MB/s eta 0:00:01\r\u001b[K     |████████▏                       | 20 kB 23.2 MB/s eta 0:00:01\r\u001b[K     |████████████▏                   | 30 kB 17.2 MB/s eta 0:00:01\r\u001b[K     |████████████████▎               | 40 kB 15.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████▎           | 51 kB 7.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▍       | 61 kB 8.5 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▍   | 71 kB 8.1 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 80 kB 5.1 MB/s \n","\u001b[?25hRequirement already satisfied: pandas>=0.21.1 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (1.1.5)\n","Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (1.4.1)\n","Requirement already satisfied: patsy>=0.5.1 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (0.5.1)\n","Requirement already satisfied: numpy>=1.14.0 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (1.19.5)\n","Requirement already satisfied: statsmodels>=0.9.0 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (0.10.2)\n","Requirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (0.22.2.post1)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.21.1->category_encoders) (2.8.2)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.21.1->category_encoders) (2018.9)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from patsy>=0.5.1->category_encoders) (1.15.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.20.0->category_encoders) (1.0.1)\n","Installing collected packages: category-encoders\n","Successfully installed category-encoders-2.2.2\n","Collecting eli5\n","  Downloading eli5-0.11.0-py2.py3-none-any.whl (106 kB)\n","\u001b[K     |████████████████████████████████| 106 kB 9.6 MB/s \n","\u001b[?25hRequirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from eli5) (1.15.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from eli5) (1.4.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from eli5) (2.11.3)\n","Requirement already satisfied: numpy>=1.9.0 in /usr/local/lib/python3.7/dist-packages (from eli5) (1.19.5)\n","Requirement already satisfied: attrs>16.0.0 in /usr/local/lib/python3.7/dist-packages (from eli5) (21.2.0)\n","Requirement already satisfied: scikit-learn>=0.20 in /usr/local/lib/python3.7/dist-packages (from eli5) (0.22.2.post1)\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.7/dist-packages (from eli5) (0.10.1)\n","Requirement already satisfied: tabulate>=0.7.7 in /usr/local/lib/python3.7/dist-packages (from eli5) (0.8.9)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.20->eli5) (1.0.1)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->eli5) (2.0.1)\n","Installing collected packages: eli5\n","Successfully installed eli5-0.11.0\n","Requirement already satisfied: hyperopt in /usr/local/lib/python3.7/dist-packages (0.1.2)\n","Requirement already satisfied: pymongo in /usr/local/lib/python3.7/dist-packages (from hyperopt) (3.12.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from hyperopt) (1.19.5)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from hyperopt) (4.62.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from hyperopt) (1.15.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from hyperopt) (1.4.1)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.7/dist-packages (from hyperopt) (2.6.2)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from hyperopt) (0.16.0)\n","Requirement already satisfied: xgboost in /usr/local/lib/python3.7/dist-packages (0.90)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from xgboost) (1.19.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from xgboost) (1.4.1)\n"]}]},{"cell_type":"code","metadata":{"id":"HHyRKVjToI6k","executionInfo":{"status":"ok","timestamp":1630482725138,"user_tz":-540,"elapsed":21,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}}},"source":[""],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"id":"PLEVTfVO73bY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630482727548,"user_tz":-540,"elapsed":2430,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}},"outputId":"e8289b00-f49f-478f-f991-a42f288c98f1"},"source":["from category_encoders import OrdinalEncoder\n","from sklearn.impute import SimpleImputer\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.pipeline import make_pipeline\n","from sklearn.pipeline import Pipeline\n","import warnings\n","warnings.simplefilter(action='ignore', category=FutureWarning)\n","import eli5\n","from eli5.sklearn import PermutationImportance\n","\n","from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n","from sklearn.metrics import f1_score\n","from scipy.stats import randint,uniform\n","\n","from sklearn.metrics import roc_curve\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import roc_auc_score"],"execution_count":18,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"]}]},{"cell_type":"code","metadata":{"id":"cXrxrGs4UwaV","executionInfo":{"status":"ok","timestamp":1630482727551,"user_tz":-540,"elapsed":7,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}}},"source":[""],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"id":"rfETvPQTUrle","executionInfo":{"status":"ok","timestamp":1630482727552,"user_tz":-540,"elapsed":7,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}}},"source":[""],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"id":"y19jXEx5TvDK","executionInfo":{"status":"ok","timestamp":1630482728332,"user_tz":-540,"elapsed":786,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}}},"source":["from xgboost import XGBClassifier\n","from hyperopt import STATUS_OK, Trials, fmin, hp, tpe"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"os08aWW0cAsP"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"p8cfynoacDO-"},"source":["{'class__min_child_weight': 5, 'class__max_depth': 3}  \n","0.9150702407738683"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HktGtfl4SV_u","executionInfo":{"status":"ok","timestamp":1630482728333,"user_tz":-540,"elapsed":62,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}},"outputId":"7851c82a-8dfa-4a77-f0a0-8ff820c0d700"},"source":["y_train.value_counts(normalize=True)"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    0.894997\n","1    0.105003\n","Name: winPlacePerc, dtype: float64"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nG9_oBdxyoYG","executionInfo":{"status":"ok","timestamp":1630482728333,"user_tz":-540,"elapsed":61,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}},"outputId":"5cad44c7-6fb6-41b1-a887-21a26a6fbcaa"},"source":["from collections import Counter #model의 가중치 넣는법 \n","counter = Counter(y_train) \n","spw = counter[0] / counter[1]#scale_pos_weight = total_negative_lights / total_pos\n","spw"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["8.523549462018842"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"v_JFk8jDl4cD"},"source":["hp.choice(label, options) — Returns one of the options, which should be a list or tuple.\n","\n","hp.randint(label, upper) — Returns a random integer between the range [0, upper).\n","\n","hp.uniform(label, low, high) — Returns a value uniformly between low and high.\n","\n","hp.quniform(label, low, high, q) — Returns a value round(uniform(low, high) / q) * q, i.e it rounds the decimal values and returns an integer.\n","\n","hp.normal(label, mean, std) — Returns a real value that’s normally-distributed with mean and standard deviation sigma."]},{"cell_type":"code","metadata":{"id":"kBFjCzLIoLJX","executionInfo":{"status":"ok","timestamp":1630482728334,"user_tz":-540,"elapsed":56,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}}},"source":[""],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"id":"doIF3YQwoQrA","executionInfo":{"status":"ok","timestamp":1630482728335,"user_tz":-540,"elapsed":57,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}}},"source":[""],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"id":"m6qsmmUFFn-T","executionInfo":{"status":"ok","timestamp":1630482728336,"user_tz":-540,"elapsed":57,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}}},"source":[""],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"id":"qvNRwzOwFjgL","executionInfo":{"status":"ok","timestamp":1630482728337,"user_tz":-540,"elapsed":58,"user":{"displayName":"김석재","photoUrl":"","userId":"05383809141048124324"}}},"source":[""],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2gIw2BHpFR9Z","outputId":"2bf47cf9-3e85-408d-c46a-323fd32686dc"},"source":["pipe=Pipeline([('pre',OrdinalEncoder()),  #name step을 안주니까 parameta에서 읽지를못함\n","                   ('class',XGBClassifier(\n","                       base_score=0.894723, #base_score를 넣을수있어서 넣었는데 어떻게변하는지는 잘모르겠습니다                   \n","                       scale_pos_weight=spw,\n","                       colsample_bytree=0.9026379231331474,\n","                       gamma= 3,\n","                       learning_rate= 0.014516840274511014,\n","                       max_depth=4,\n","                       min_child_weight= 1,\n","                       n_estimators=214,\n","                       subsample= 0.7142428783542877 #eval_metric='auc'                                             \n","                       ))])\n","\n","params = {    \n","    'class__max_depth': randint(3,10),        \n","    'class__gamma': randint(0,5),\n","    'class__lambda': randint(0,5),\n","    'class__alpha': randint(0,5),         \n","    }\n","randomcv = RandomizedSearchCV(pipe, param_distributions=params, n_iter=100,cv=3,\n","                                   scoring='roc_auc', n_jobs=-1, verbose=3, random_state=2 )#f1_score weighted와 똑같다\n","randomcv.fit(X_train,y_train)"],"execution_count":null,"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Fitting 3 folds for each of 100 candidates, totalling 300 fits\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n","[Parallel(n_jobs=-1)]: Done  24 tasks      | elapsed: 91.5min\n","/usr/local/lib/python3.7/dist-packages/joblib/externals/loky/process_executor.py:691: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n"]}]},{"cell_type":"code","metadata":{"id":"_CTpsq6Al3k2"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VGllGWtDmjlH"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GYb2SBtkraXS"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DfebTLfvsRYx"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0aGZeNytcmJy"},"source":["'class__colsample_bytree': 0.9026379231331474,  \n","'class__gamma': 3,  \n","'class__learning_rate': 0.014516840274511014,  \n","  'class__max_depth': 4,  \n","   'class__min_child_weight': 1,  \n","      'class__n_estimators': 214,  \n","         'class__subsample': 0.7142428783542877  \n","train = 0.8488590862579588  \n","vali = 0.8485969692704555"]},{"cell_type":"code","metadata":{"id":"rFgsT_NSp7GJ"},"source":["print(\"The best hyperparameters are : \",\"\\n\")\n","print(best_hyperparams)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wvGfugVYpu61"},"source":["y_train_pro=clf.predict_proba(X_train)[:,1]\n"," # proba가 [0의확률,1의확률] 두값이 존재 현재 필요한건 1의값"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ymW55RT-x-77"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rrMH7TRoFfbd"},"source":["def rocauc(y,y_pre_pro):\n","    fpr, tpr, thresholds = roc_curve(y, y_pre) #fpr tpr 임계점\n","    roc = pd.DataFrame({ #시각화를 위한 데이터프레임\n","        'FPR(Fall-out)': fpr, \n","        'TPRate(Recall)': tpr, \n","        'Threshold': thresholds\n","    })\n","    plt.scatter(fpr, tpr) #점찍음\n","    plt.title('ROC curve')\n","    plt.xlabel('FPR(Fall-out)')\n","    plt.ylabel('TPR(Recall)')\n","\n","    optimal_idx = np.argmax(tpr - fpr) #tpr-fpr이 최대치가 되는부분을 찾음\n","    optimal_threshold = thresholds[optimal_idx] #고것이 추천 임계점\n","\n","    print('idx:', optimal_idx, ', threshold:', optimal_threshold)\n","    y_pred_optimal = y_pre >= optimal_threshold #임계점보다 높은 값은 True\n","    print(classification_report(y, y_pred_optimal)) #classification을 보기위해 %=>true false로 바꾼것\n","    auc_score = roc_auc_score(y, y_pre)\n","    print('auc값:'auc_score)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"J2BScpBPPtqC"},"source":["rocauc(y_vali,y_vali_pro)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0kvAmdymP3iu"},"source":["#여기서 한가지 의심드는게 GroupsId가 같으면 똥을싸도 캐리어의 점수를 따라가게된다"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lSq-zfQrP5CV"},"source":["def groupmax(model,X_):\n","    y_prepro=model.predict_proba(X_)[:,1] #모델의 예측값의 %\n","    y_prepro=pd.DataFrame(y_prepro)#df로 바꿔줌\n","    X_ts=X_.reset_index(drop=True)#prepro에 원래 index값이 안남아있어서 합치기위해 리셋인덱스\n","    X_ts=pd.concat([X_ts['groupId'],y_prepro],axis=1) #groupId와 y_prepro 합침\n","    X_ts=X_ts.sort_values(by='groupId').reset_index()#groupId순으로 정렬하고 기존 인덱스를 살림\n","    X_gr=X_ts.groupby('groupId')[0].max().reset_index()#groupId별 예측값의 최대값 groupid 살림\n","    X_max=pd.merge(X_ts,X_gr,how='left',on='groupId')#합치면서 각 groupId별로 max예측값을 갖게됨\n","    X_max=X_max.set_index('index').sort_index()#기본에 빼놨던 기본index를 기준으로 정렬\n","    y_max=X_max['0_y']#예측값만 꺼냄\n","    return print('y_max:',y_max)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ma0gxqFzP7zK"},"source":["groupmax(clf,X_vali)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MegCrxFqE_VL"},"source":["rocauc(y_vali,y_max)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5iPZWNAXn4qd"},"source":["xgbfi=randomcv.best_estimator_.named_steps['class'] #randomcv 안에있는 named_steps으로 xgb를 꺼냄"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eFuaVogEtfN-"},"source":["importances = pd.Series(xgbfi.feature_importances_, X_train.columns) #xgb자체 feature importances\n","plt.figure(figsize=(10,10))\n","importances.sort_values().plot.barh();"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"It8QgfbWudss"},"source":["permuter=PermutationImportance(\n","    clf,\n","    scoring='f1_weighted',\n","    n_iter=5,\n","    random_state=2)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EjkcjnBeQ3X6"},"source":["\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FqpQ8WjTQ4Ol"},"source":["permuter.fit(X_vali,y_vali)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"skMlWEswviYH"},"source":["feature_names = X_train.columns.tolist()\n","pd.Series(permuter.feature_importances_, feature_names).sort_values()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EvLQIWV-vm8P"},"source":["eli5.show_weights(\n","    permuter, \n","    top=None, \n","    feature_names=feature_names \n",") #xgb기본 feature importances와는 다를걸 예상했지만 이건 달라도 너무달라서 충격적이다 \n","# ttdistgame는 개인의 이동거리/각 게임당 전인원의 이동거리로 만든것인데 너무 할 정도로 높다...\n","# 전처리중에 아예 타겟값을 베이스로 만든 피쳐는 없었음.. "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hMhnVdFPV8ta"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0TYPHzgkZOHb"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UaFq3H5GYhoU"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WRbHlAxNW6K5"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5ocSdPZFZshY"},"source":["기존결과  \n","'class__colsample_bytree': 0.9026379231331474,  \n","'class__gamma': 3,  \n","'class__learning_rate': 0.014516840274511014,  \n","'class__max_depth': 4,  \n","'class__min_child_weight': 1,  \n","'class__n_estimators': 214,  \n","'class__subsample': 0.7142428783542877  \n","train = 0.8488590862579588  \n","vali = 0.8485969692704555  "]}]}